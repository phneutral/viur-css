"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (equalityCheck) {
  return function (rule, schema) {
    var ruleName = schema.ruleName;

    var ruleOptions = (0, _normalizeRuleSettings2.default)(schema.config);
    var rulePrimaryOptions = ruleOptions[0];
    var ruleSecondaryOptions = ruleOptions[1];

    var printableConfig = rulePrimaryOptions ? JSON.stringify(rulePrimaryOptions) : "";
    if (printableConfig && ruleSecondaryOptions) {
      printableConfig += ", " + JSON.stringify(ruleSecondaryOptions);
    }

    function createCaseDescription(code) {
      var text = "\n> rule: " + ruleName + "\n";
      text += "> config: " + printableConfig + "\n";
      text += "> code: " + JSON.stringify(code) + "\n";
      return text;
    }

    function postcssProcess(code) {
      var processor = (0, _postcss2.default)();
      processor.use(_disableRanges2.default);

      if (schema.preceedingPlugins) {
        schema.preceedingPlugins.forEach(processor.use);
      }

      return processor.use(rule(rulePrimaryOptions, ruleSecondaryOptions)).process(code, schema.postcssOptions);
    }

    if (schema.accept) {
      schema.accept.forEach(function (acceptedCase) {
        var assertionDescription = spaceJoin(acceptedCase.description, "should be accepted");
        var resultPromise = postcssProcess(acceptedCase.code).then(function (postcssResult) {
          var warnings = postcssResult.warnings();
          return [{
            expected: 0,
            actual: warnings.length,
            description: assertionDescription
          }];
        });
        equalityCheck(resultPromise, {
          caseDescription: createCaseDescription(acceptedCase.code),
          completeAssertionDescription: assertionDescription
        });
      });
    }

    if (schema.reject) {
      schema.reject.forEach(function (rejectable) {
        var completeAssertionDescription = "should register one warning";
        if (rejectable.line) completeAssertionDescription += " on line " + rejectable.line;
        if (rejectable.column) completeAssertionDescription += " on column " + rejectable.column;
        if (rejectable.message) completeAssertionDescription += " with message \"" + rejectable.message + "\"";

        var resultPromise = postcssProcess(rejectable.code).then(function (postcssResult) {
          var warnings = postcssResult.warnings();
          var comparisons = [{
            expected: 1,
            actual: warnings.length,
            description: spaceJoin(rejectable.description, "should register one warning")
          }];
          if (!warnings.length) return comparisons;

          var warning = warnings[0];

          if (rejectable.line) {
            comparisons.push({
              expected: rejectable.line,
              actual: warning.line,
              description: spaceJoin(rejectable.description, "should warn on line " + rejectable.line)
            });
          }
          if (rejectable.column !== undefined) {
            comparisons.push({
              expected: rejectable.column,
              actual: warning.column,
              description: spaceJoin(rejectable.description, "should warn on column " + rejectable.column)
            });
          }
          if (rejectable.message) {
            comparisons.push({
              expected: rejectable.message,
              actual: warning.text,
              description: spaceJoin(rejectable.description, "should warn with message " + rejectable.message)
            });
          }
          return comparisons;
        });

        equalityCheck(resultPromise, {
          caseDescription: createCaseDescription(rejectable.code),
          completeAssertionDescription: completeAssertionDescription
        });
      });
    }
  };
};

var _postcss = require("postcss");

var _postcss2 = _interopRequireDefault(_postcss);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _normalizeRuleSettings = require("../normalizeRuleSettings");

var _normalizeRuleSettings2 = _interopRequireDefault(_normalizeRuleSettings);

var _disableRanges = require("../disableRanges");

var _disableRanges2 = _interopRequireDefault(_disableRanges);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function spaceJoin() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return _lodash2.default.compact(args).join(" ");
}
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.messages = exports.ruleName = undefined;

exports.default = function (actual) {
  return function (root, result) {
    var validOptions = (0, _utils.validateOptions)(result, ruleName, { actual: actual });
    if (!validOptions) {
      return;
    }

    root.walkRules(function (rule) {
      rule.selectors.forEach(function (selector) {
        (0, _postcssSelectorParser2.default)(checkSelector).process(selector);
      });
      function checkSelector(fullSelector) {
        console.log(fullSelector);
      }
      //
      //   // Return early if there is interpolation in the selector
      //   if (/#{.+?}|@{.+?}|\$\(.+?\)/.test(selector)) { return }
      //
      //   resolvedNestedSelector(selector, rule).forEach(resolvedSelector => {
      //     // calculate() returns a four section string â€” we only need 3 so strip the first two characters
      //     const computedSpecificity = calculate(resolvedSelector)[0].specificity.substring(2)
      //     // Check if the selector specificity exceeds the allowed maximum
      //     if (parseFloat(computedSpecificity.replace(/,/g, "")) > parseFloat(max.replace(/,/g, ""))) {
      //       report({
      //         ruleName,
      //         result,
      //         node: rule,
      //         message: messages.expected(resolvedSelector, max),
      //         word: selector,
      //       })
      //     }
      //   })
      // })
    });
  };
};

var _specificity = require("specificity");

var _postcssSelectorParser = require("postcss-selector-parser");

var _postcssSelectorParser2 = _interopRequireDefault(_postcssSelectorParser);

var _postcssResolveNestedSelector = require("postcss-resolve-nested-selector");

var _postcssResolveNestedSelector2 = _interopRequireDefault(_postcssResolveNestedSelector);

var _utils = require("../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ruleName = exports.ruleName = "selector-no-descending-specificity";

var messages = exports.messages = (0, _utils.ruleMessages)(ruleName, {
  rejected: function rejected(a, b) {
    return "Expected selector \"" + b + "\" to come before selector \"" + a + "\"";
  }
});
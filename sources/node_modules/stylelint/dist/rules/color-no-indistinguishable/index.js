"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.messages = exports.ruleName = undefined;

exports.default = function (on, options) {
  return function (root, result) {
    var validOptions = (0, _utils.validateOptions)(result, ruleName, { actual: on }, {
      optional: true,
      actual: options,
      possible: {
        ignore: _utils.isValidHex,
        threshold: function threshold(x) {
          return (0, _lodash.isNumber)(x) && x >= 0 && x <= 100;
        },
        whitelist: function whitelist(x) {
          return (0, _lodash.isArray)(x) && x.every(_utils.isValidHex);
        }
      }
    });
    if (!validOptions) {
      return;
    }

    var colorguardResult = new _result2.default();
    (0, _colorguard2.default)(options)(root, colorguardResult);
    colorguardResult.warnings().forEach(function (colorguardWarning) {
      var parsedWarning = parseColorguardWarning(colorguardWarning.text);
      var message = messages.rejected(parsedWarning[0], parsedWarning[1]);
      (0, _utils.report)({
        ruleName: ruleName,
        result: result,
        message: message,
        node: colorguardWarning.node,
        index: colorguardWarning.node.toString().indexOf(parsedWarning[0])
      });
    });
  };
};

var _colorguard = require("colorguard");

var _colorguard2 = _interopRequireDefault(_colorguard);

var _lodash = require("lodash");

var _result = require("postcss/lib/result");

var _result2 = _interopRequireDefault(_result);

var _utils = require("../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ruleName = exports.ruleName = "color-no-almost-identical";

var messages = exports.messages = (0, _utils.ruleMessages)(ruleName, {
  rejected: function rejected(a, b) {
    return "Unexpected almost identical colors: \"" + a + "\" and \"" + b + "\"";
  }
});

function parseColorguardWarning(warning) {
  return warning.match(/^(\S+) collides with (\S+)/).slice(1);
}